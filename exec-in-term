#!/usr/bin/env bash


help_doc (){
	cat <<-'HelpDoc'
		exec-in-term: execute a command in a new interactive terminal window

		-t|--terminal      # Optional, filename of terminal to use
		-d|--working-dir   # Optional, directory to open in
		-p|--persist       # Optional, leave the terminal open after execution, makes -x optional
		-x|--execute       # String to be executed
		--stdin            # Read string to be executed from stdin
		-h|--help          # Output help

		Examples of use:
		  exec-in-term -p -x 'echo hello'
		  exec-in-term -x 'echo hello'
		  exec-in-term --stdin <<< 'echo hello'

	HelpDoc
	exit 0
}



print_stderr() {
	[[ $2 ]] && printf "$2" "${@:3}" 1>&2
	[[ $1 == '0' ]] || exit $1
}



[[ $1 ]] || help_doc
while [[ $1 ]]; do
	case $1 in
		'--terminal'|'-t')
			shift; terminal=$1 ;;
		'--working-dir'|'-d')
			shift; working_dir=$1 ;;
		'--persist'|'-p')
			persist=1 ;;
		'--execute'|'-x')
			shift; execute_cmd=$1 ;;
		'--stdin')
			execute_cmd=$(</dev/stdin) ;;
		'--help'|'-h')
			help_doc ;;
		*)
			print_stderr 1 '%s\n' 'Unrecognized parameter: '"$1" ;;
	esac
	shift
done



# Define the terminal execute command
declare -A terminal_to_command=(
	['alacritty']='alacritty -e'
	['xfce4-terminal']='xfce4-terminal -x'
)

declare -A terminal_aliases=(
	['default']='alacritty'
	['xfce']='xfce4-terminal'
)

terminal_try_arr=(
	alacritty
	xfce4-terminal
)



# cd into working directory
if [[ $working_dir ]]; then
	[[ -d $working_dir ]] || print_stderr 1 '%s\n' '--working-dir is not a directory: '"$working_dir"
	cd "$working_dir"
fi



# Fallback through terminals to use
if [[ ! $terminal ]]; then
	for terminal_try in ${terminal_try_arr[@]}; do
		if which "$terminal_try" &> /dev/null; then
			terminal=$terminal_try
			break
		fi
	done

else
	terminal=${terminal_aliases[$terminal]}
fi

[[ $terminal ]] || print_stderr 1 '%s\n' 'No supported terminal installed'
which "$terminal" &> /dev/null || print_stderr 1 '%s\n' 'Terminal not installed: '"$terminal"



# If there's no command to execute, just open the terminal
if [[ ! $execute_cmd ]]; then
	( $terminal ) &> /dev/null & disown
	exit 0
fi



# Define terminal command
terminal_cmd=${terminal_to_command["$terminal"]}
[[ $terminal_cmd ]] || print_stderr 1 '%s\n' 'Unsupported terminal'



# Open the terminal
if [[ $persist ]]; then
	# Create a named pipe with 0600 permissions (rw for user only).
	fifo_path='/tmp/open_in_terminal__'$$'_'$RANDOM$RANDOM
	[[ -e $fifo_path ]] && rm "$fifo_path"
	mkfifo --mode 0600 "$fifo_path"

	# Create the .bashrc remix
	printf -v bashrc_remix '%s\n%s\n' "$(< $HOME/.bashrc)" "$execute_cmd"

	# Open terminal and have bash listen on the named pipe for the rcfile
	( $terminal_cmd bash --rcfile "$fifo_path" ) &> /dev/null & disown

	# Deliver the remixed .bashrc over the named pipe
	printf '%s' "$bashrc_remix" > "$fifo_path"

	# Delete the named pipe
	rm "$fifo_path"

else
	[[ $execute_cmd ]] || print_stderr 1 '%s\n' 'Nothing to execute'
	( $terminal_cmd bash -c "$execute_cmd" ) & disown

fi




